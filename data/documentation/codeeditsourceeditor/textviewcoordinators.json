{"metadata":{"title":"TextView Coordinators","roleHeading":"Article","role":"article","modules":[{"name":"CodeEditSourceEditor"}]},"kind":"article","hierarchy":{"paths":[["doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor"]]},"sections":[],"primaryContentSections":[{"kind":"content","content":[{"level":2,"text":"Overview","anchor":"Overview","type":"heading"},{"type":"paragraph","inlineContent":[{"type":"text","text":"CodeEditSourceEditor provides this API as a way to push messages up from underlying components into SwiftUI land without requiring passing callbacks for each message to the "},{"isActive":true,"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditSourceEditor","type":"reference"},{"text":" initializer.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"They’re very useful for updating UI that is directly related to the state of the editor, such as the current cursor position. For an example of how this can be useful, see the ","type":"text"},{"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CombineCoordinator","type":"reference","isActive":true},{"type":"text","text":" class, which implements combine publishers for the messages this protocol provides."}]},{"type":"paragraph","inlineContent":[{"type":"text","text":"They can also be used to get more detailed text editing notifications by conforming to the "},{"code":"TextViewDelegate","type":"codeVoice"},{"type":"text","text":" (from CodeEditTextView) protocol. In that case they’ll receive most text change notifications."}]},{"anchor":"Make-a-Coordinator","type":"heading","text":"Make a Coordinator","level":3},{"inlineContent":[{"type":"text","text":"To create a coordinator, first create a class that conforms to the "},{"type":"reference","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator","isActive":true},{"text":" protocol.","type":"text"}],"type":"paragraph"},{"syntax":"swift","code":["class MyCoordinator {","    func prepareCoordinator(controller: TextViewController) { ","        \/\/ Do any setup, such as keeping a (weak) reference to the controller or adding a text storage delegate.","    }","}"],"type":"codeListing"},{"type":"paragraph","inlineContent":[{"text":"Add any methods required for your coordinator to work, such as receiving notifications when text is edited, or","type":"text"}]},{"code":["class MyCoordinator {","    func prepareCoordinator(controller: TextViewController) { \/* ... *\/ }","","    func textViewDidChangeText(controller: TextViewController) {","        \/\/ Text was updated.","    }","","    func textViewDidChangeSelection(controller: TextViewController, newPositions: [CursorPosition]) {","        \/\/ Selections were changed","    }","}"],"type":"codeListing","syntax":"swift"},{"inlineContent":[{"text":"If your coordinator keeps any references to anything in CodeEditSourceEditor, make sure to dereference them using the ","type":"text"},{"isActive":true,"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator\/destroy()-9nzfl","type":"reference"},{"text":" method.","type":"text"}],"type":"paragraph"},{"type":"codeListing","syntax":"swift","code":["class MyCoordinator {","    func prepareCoordinator(controller: TextViewController) { \/* ... *\/ }","    func textViewDidChangeText(controller: TextViewController) { \/* ... *\/ }","    func textViewDidChangeSelection(controller: TextViewController, newPositions: [CursorPosition]) { \/* ... *\/ }","","    func destroy() {","        \/\/ Release any resources, `nil` any weak variables, remove delegates, etc.","    }","}"]},{"level":3,"text":"Coordinator Lifecycle","type":"heading","anchor":"Coordinator-Lifecycle"},{"type":"paragraph","inlineContent":[{"text":"A coordinator makes no assumptions about initialization, leaving the developer to pass any init parameters to the coordinator.","type":"text"}]},{"inlineContent":[{"text":"The lifecycle looks like this:","type":"text"}],"type":"paragraph"},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"Coordinator initialized (by user, not CodeEditSourceEditor)."}]}]},{"content":[{"inlineContent":[{"type":"text","text":"Coordinator given to CodeEditSourceEditor."}],"type":"paragraph"},{"items":[{"content":[{"type":"paragraph","inlineContent":[{"type":"reference","isActive":true,"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator\/prepareCoordinator(controller:)"},{"type":"text","text":" is called."}]}]}],"type":"unorderedList"}]},{"content":[{"type":"paragraph","inlineContent":[{"text":"Events occur, coordinators are notified in the order they were passed to CodeEditSourceEditor.","type":"text"}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CodeEditSourceEditor is being closed."}]},{"type":"unorderedList","items":[{"content":[{"type":"paragraph","inlineContent":[{"isActive":true,"type":"reference","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator\/destroy()-9nzfl"},{"type":"text","text":" is called."}]}]},{"content":[{"type":"paragraph","inlineContent":[{"type":"text","text":"CodeEditSourceEditor stops referencing the coordinator."}]}]}]}]}]},{"anchor":"TextViewDelegate-Conformance","level":3,"type":"heading","text":"TextViewDelegate Conformance"},{"type":"paragraph","inlineContent":[{"text":"If a coordinator conforms to the ","type":"text"},{"code":"TextViewDelegate","type":"codeVoice"},{"type":"text","text":" protocol from the "},{"type":"codeVoice","code":"CodeEditTextView"},{"text":" package, it will receive forwarded delegate messages for the editor’s text view.","type":"text"}]},{"type":"paragraph","inlineContent":[{"text":"The messages it will receive:","type":"text"}]},{"type":"codeListing","code":["func textView(_ textView: TextView, willReplaceContentsIn range: NSRange, with string: String)","func textView(_ textView: TextView, didReplaceContentsIn range: NSRange, with string: String)"],"syntax":"swift"},{"type":"paragraph","inlineContent":[{"type":"text","text":"It will "},{"type":"emphasis","inlineContent":[{"type":"text","text":"not"}]},{"type":"text","text":" receive the following:"}]},{"syntax":"swift","type":"codeListing","code":["func textView(_ textView: TextView, shouldReplaceContentsIn range: NSRange, with string: String) -> Bool"]},{"level":3,"text":"Example","anchor":"Example","type":"heading"},{"inlineContent":[{"text":"To see an example of a coordinator and they’re use case, see the ","type":"text"},{"type":"reference","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CombineCoordinator","isActive":true},{"type":"text","text":" class. This class creates a coordinator that passes notifications on to a Combine stream."}],"type":"paragraph"}]}],"variants":[{"paths":["\/documentation\/codeeditsourceeditor\/textviewcoordinators"],"traits":[{"interfaceLanguage":"swift"}]}],"identifier":{"url":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinators","interfaceLanguage":"swift"},"abstract":[{"text":"Add advanced functionality to CodeEditSourceEditor.","type":"text"}],"schemaVersion":{"major":0,"minor":3,"patch":0},"seeAlsoSections":[{"identifiers":["doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator","doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CombineCoordinator"],"title":"Text Coordinators","generated":true}],"references":{"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewCoordinator":{"type":"topic","url":"\/documentation\/codeeditsourceeditor\/textviewcoordinator","abstract":[{"type":"text","text":"A protocol that can be used to receive extra state change messages from "},{"type":"reference","isActive":true,"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditSourceEditor"},{"type":"text","text":"."}],"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator","fragments":[{"text":"protocol","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"TextViewCoordinator"}],"title":"TextViewCoordinator","role":"symbol","kind":"symbol","navigatorTitle":[{"text":"TextViewCoordinator","kind":"identifier"}]},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewCoordinator/prepareCoordinator(controller:)":{"kind":"symbol","type":"topic","abstract":[{"type":"text","text":"Called when an instance of "},{"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewController","type":"reference","isActive":true},{"text":" is available. Use this method to install any delegates,","type":"text"},{"text":" ","type":"text"},{"type":"text","text":"perform any modifications on the text view or controller, or capture the text view for later use in your app."}],"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"kind":"identifier","text":"prepareCoordinator"},{"kind":"text","text":"("},{"text":"controller","kind":"externalParam"},{"text":": ","kind":"text"},{"kind":"typeIdentifier","preciseIdentifier":"c:@M@CodeEditSourceEditor@objc(cs)TextViewController","text":"TextViewController"},{"text":")","kind":"text"}],"title":"prepareCoordinator(controller:)","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator\/prepareCoordinator(controller:)","role":"symbol","url":"\/documentation\/codeeditsourceeditor\/textviewcoordinator\/preparecoordinator(controller:)","required":true},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewController":{"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewController","role":"symbol","fragments":[{"text":"class","kind":"keyword"},{"kind":"text","text":" "},{"text":"TextViewController","kind":"identifier"}],"kind":"symbol","type":"topic","title":"TextViewController","url":"\/documentation\/codeeditsourceeditor\/textviewcontroller","abstract":[{"text":"A view controller class for managing a source editor. Uses ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditTextView\/TextView"},{"type":"text","text":" for input and rendering,"},{"type":"text","text":" "},{"text":"tree-sitter for syntax highlighting, and TextFormation for live editing completions.","type":"text"}],"navigatorTitle":[{"kind":"identifier","text":"TextViewController"}]},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/TextViewCoordinator/destroy()-9nzfl":{"fragments":[{"text":"func","kind":"keyword"},{"kind":"text","text":" "},{"text":"destroy","kind":"identifier"},{"text":"()","kind":"text"}],"title":"destroy()","type":"topic","required":true,"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator\/destroy()-9nzfl","role":"symbol","defaultImplementations":1,"kind":"symbol","url":"\/documentation\/codeeditsourceeditor\/textviewcoordinator\/destroy()-9nzfl","abstract":[{"text":"Called when the text controller is being destroyed. Use to free any necessary resources.","type":"text"}]},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/CodeEditSourceEditor":{"identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CodeEditSourceEditor","role":"symbol","fragments":[{"text":"struct","kind":"keyword"},{"text":" ","kind":"text"},{"kind":"identifier","text":"CodeEditSourceEditor"}],"kind":"symbol","type":"topic","title":"CodeEditSourceEditor","url":"\/documentation\/codeeditsourceeditor\/codeeditsourceeditor","abstract":[{"type":"text","text":"A SwiftUI View that provides source editing functionality."}],"navigatorTitle":[{"kind":"identifier","text":"CodeEditSourceEditor"}]},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor/CombineCoordinator":{"type":"topic","fragments":[{"text":"class","kind":"keyword"},{"text":" ","kind":"text"},{"text":"CombineCoordinator","kind":"identifier"}],"role":"symbol","url":"\/documentation\/codeeditsourceeditor\/combinecoordinator","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/CombineCoordinator","navigatorTitle":[{"kind":"identifier","text":"CombineCoordinator"}],"title":"CombineCoordinator","abstract":[{"text":"A ","type":"text"},{"isActive":true,"type":"reference","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor\/TextViewCoordinator"},{"text":" class that publishes text changes and selection changes using Combine publishers.","type":"text"}],"kind":"symbol"},"doc://CodeEditSourceEditor/documentation/CodeEditSourceEditor":{"role":"collection","type":"topic","identifier":"doc:\/\/CodeEditSourceEditor\/documentation\/CodeEditSourceEditor","kind":"symbol","title":"CodeEditSourceEditor","url":"\/documentation\/codeeditsourceeditor","abstract":[{"text":"A code editor with syntax highlighting powered by tree-sitter.","type":"text"}]}}}